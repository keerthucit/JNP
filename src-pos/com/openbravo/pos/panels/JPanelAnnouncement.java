//    Openbravo POS is a point of sales application designed for touch screens.
//    Copyright (C) 2007-2009 Openbravo, S.L.
//    http://www.openbravo.com/product/pos
//
//    This file is part of Openbravo POS.
//
//    Openbravo POS is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    Openbravo POS is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with Openbravo POS.  If not, see <http://www.gnu.org/licenses/>.

package com.openbravo.pos.panels;

import com.openbravo.pos.forms.JPanelView;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.AppLocal;
import java.text.ParseException;
import javax.swing.*;
import java.util.Date;
import com.openbravo.format.Formats;
import com.openbravo.basic.BasicException;
import com.openbravo.beans.JCalendarDialog;
import com.openbravo.pos.forms.BeanFactoryApp;
import com.openbravo.pos.forms.BeanFactoryException;
import com.openbravo.pos.forms.DataLogicSales;
import com.openbravo.pos.forms.DataLogicSystem;
import com.openbravo.pos.forms.JRootApp;
import com.openbravo.pos.forms.announcementInfo;
import com.openbravo.pos.forms.holidayInfo;
import com.openbravo.pos.printer.TicketParser;
import java.awt.Dimension;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author adrianromero
 */
public class JPanelAnnouncement extends JPanel implements JPanelView,BeanFactoryApp{
    private AppView m_App;
    private DataLogicSystem m_dlSystem;
    private com.openbravo.pos.forms.holidayInfo m_polines;
    private TicketParser m_TTP;
    
    protected DataLogicSales m_dlSales;

    private String[] announce;
  

    private static Pattern pNum = Pattern.compile(".*[0-9].*");
    private String user;
    public DefaultListModel model = null;
    public java.util.List<showInfo> list = null;
    public boolean updateMode = false;
    private JRootApp m_RootApp;
    private java.util.List<announcementInfo> announceList = null;
    private int announceSize = 0;

    /** Creates new form JPanelCloseMoney */
    public JPanelAnnouncement() {
        System.out.println("enetr1");
        initComponents();

    }
    
    public void init(AppView app) throws BeanFactoryException{

        m_App = app;        
        m_dlSystem = (DataLogicSystem) m_App.getBean("com.openbravo.pos.forms.DataLogicSystem");
        m_dlSales = (DataLogicSales) m_App.getBean("com.openbravo.pos.forms.DataLogicSales");
        user = m_App.getAppUserView().getUser().getId();

        m_TTP = new TicketParser(m_App.getDeviceTicket(), m_dlSystem);
        initTableData();
        m_jtblAnnouncement.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  
       
    }


    public Object getBean() {
         return this;
    }

    public JComponent getComponent() {
        return this;
    }

    public String getTitle() {
        return AppLocal.getIntString("Menu.Announcement");
    }

    public void activate() throws BasicException {
      clearTxtFields();
    }

    public boolean deactivate() {
        // se me debe permitir cancelar el deactivate
        return true;
    }

    public void clearTxtFields() throws BasicException {

         m_txtAnnouncement.setText("");
         m_jTxtValidTo.setText("");
         m_jTxtValidFrom.setText("");

     
    }
   

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        m_jbtnEndTime = new javax.swing.JButton();
        m_jlblShowName = new javax.swing.JLabel();
        m_jLblStartTime = new javax.swing.JLabel();
        m_jTxtValidFrom = new javax.swing.JTextField();
        m_jLblEndTime = new javax.swing.JLabel();
        m_jTxtValidTo = new javax.swing.JTextField();
        m_jBtnStartTime = new javax.swing.JButton();
        m_jBtnSave = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        m_txtAnnouncement = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        m_jtblAnnouncement = new javax.swing.JTable();
        m_jBtnDelete = new javax.swing.JButton();

        m_jbtnEndTime.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/openbravo/images/date.png"))); // NOI18N
        m_jbtnEndTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_jbtnEndTimeActionPerformed(evt);
            }
        });

        m_jlblShowName.setText("Announcement");

        m_jLblStartTime.setText("Valid From");

        m_jTxtValidFrom.setEditable(false);
        m_jTxtValidFrom.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Button.darkShadow")), javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1)));

        m_jLblEndTime.setText("Valid To");

        m_jTxtValidTo.setEditable(false);
        m_jTxtValidTo.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Button.darkShadow")), javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1)));

        m_jBtnStartTime.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/openbravo/images/date.png"))); // NOI18N
        m_jBtnStartTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_jBtnStartTimeActionPerformed(evt);
            }
        });

        m_jBtnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/openbravo/images/filesave.png"))); // NOI18N
        m_jBtnSave.setText("Save");
        m_jBtnSave.setPreferredSize(new java.awt.Dimension(110, 25));
        m_jBtnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_jBtnSaveActionPerformed(evt);
            }
        });

        m_txtAnnouncement.setColumns(20);
        m_txtAnnouncement.setRows(1);
        m_txtAnnouncement.setAutoscrolls(false);
        m_txtAnnouncement.setBorder(null);
        jScrollPane1.setViewportView(m_txtAnnouncement);

        m_jtblAnnouncement.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SL No.", "Announcement", "Valid From", "Valid To", "Delete"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        m_jtblAnnouncement.setColumnSelectionAllowed(true);
        m_jtblAnnouncement.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jScrollPane2.setViewportView(m_jtblAnnouncement);
        m_jtblAnnouncement.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        m_jBtnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/openbravo/images/editdelete.png"))); // NOI18N
        m_jBtnDelete.setText("Delete");
        m_jBtnDelete.setPreferredSize(new java.awt.Dimension(110, 25));
        m_jBtnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_jBtnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(m_jlblShowName, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(m_jLblStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(m_jTxtValidFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(m_jBtnStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(m_jLblEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(m_jTxtValidTo, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(m_jbtnEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 625, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addComponent(m_jBtnSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(m_jBtnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(414, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(m_jlblShowName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(m_jTxtValidFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(m_jBtnStartTime)
                    .addComponent(m_jLblStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(m_jTxtValidTo, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(m_jbtnEndTime)
                    .addComponent(m_jLblEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(m_jBtnSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(m_jBtnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(93, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void m_jbtnEndTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_jbtnEndTimeActionPerformed

        Date endTime = null;
        SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");

        endTime = JCalendarDialog.showCalendarTime(this, endTime);
        Date sysdate = new Date();
        String currentDate = sdf.format(sysdate);
        String selectDate = sdf.format(endTime);
         if(currentDate.compareTo(selectDate)>0 ){
             showMessage(this, "Please select the valid date");
              m_jTxtValidTo.setText("");

        }else{

              if (endTime != null) {
                m_jTxtValidTo.setText(sdf.format(endTime).toString());
            }
        }

}//GEN-LAST:event_m_jbtnEndTimeActionPerformed

    private void m_jBtnStartTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_jBtnStartTimeActionPerformed
        Date Starttime = null;
        SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");

        Starttime = JCalendarDialog.showCalendarTime(this, Starttime);
        Date sysdate = new Date();
        String currentDate = sdf.format(sysdate);
        String selectDate = sdf.format(Starttime);
         if(currentDate.compareTo(selectDate)>0 ){
             showMessage(this, "Please select the valid date");
              m_jTxtValidFrom.setText("");

        }else{

              if (Starttime != null) {
                m_jTxtValidFrom.setText(sdf.format(Starttime).toString());
            }
        }
      
    }//GEN-LAST:event_m_jBtnStartTimeActionPerformed

   
    private void m_jBtnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_jBtnSaveActionPerformed
       String announcement = m_txtAnnouncement.getText();
       String ValidFrom = m_jTxtValidFrom.getText();
       String ValidTo = m_jTxtValidTo.getText();
      
       SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
       SimpleDateFormat dt=new SimpleDateFormat("yyyy-MM-dd");
       String annouceValidTo = null;
       String annouceValidFrom = null;
       String Currentdate = sdf.format(new Date()).toString();
       String active = "Y";
      
       Date createdDate = null;
       Date specialDate = null;
       Date validFromDate = null;
       Date validtoDate = null;
        try {
            createdDate = (Date) sdf.parse(Currentdate);
         } catch (ParseException ex) {
            Logger.getLogger(JPanelAnnouncement.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if(announcement.equals("")){
             showMessage(this, "Please enter the announcement");
             m_txtAnnouncement.setText("");
        }else if(announcement.length()>250){
             showMessage(this, "Annoucement character should not exceed the limit 250");
             m_txtAnnouncement.setText("");
        } else{
           if(ValidFrom.equals("")){
                
               showMessage(this, "Please select the valid from");
           }else{
              
                if(ValidTo.equals("")){

                   showMessage(this, "Please select the valid to");
                }else if(ValidFrom.compareTo(ValidTo)>0){
                    showMessage(this, "To date should be greater than from date");
                    m_jTxtValidTo.setText("");
                }
                else{
                     int announcementCount = 0;
                    try {
                        announcementCount = m_dlSales.getAnnounceCount("Y",ValidFrom,ValidTo);
                    } catch (BasicException ex) {
                        Logger.getLogger(JPanelAnnouncement.class.getName()).log(Level.SEVERE, null, ex);
                    }
                   
                  
                    if(announcementCount!=0){

                    int res = JOptionPane.showConfirmDialog(this, AppLocal.getIntString("message.announcementmsg"), AppLocal.getIntString("message.confirm"), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                    if (res == JOptionPane.YES_OPTION) {
                        try {
                            m_dlSales.updateAnnouncement();
                        } catch (BasicException ex) {
                            Logger.getLogger(JPanelAnnouncement.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        try {
                             m_dlSystem.announcementInsert(UUID.randomUUID().toString(), announcement, ValidFrom, ValidTo, active);
                             clearTxtFields();
                        }catch (BasicException ex) {
                            Logger.getLogger(JPanelAnnouncement.class.getName()).log(Level.SEVERE, null, ex);
                        }// TODO add your handling code


                        try {
                            m_dlSystem.peoplelogInsert(UUID.randomUUID().toString(), user, JRootApp.now(), "Announcement", 0.0);
                            // TODO add your handling code here:;
                        } catch (BasicException ex) {
                            Logger.getLogger(JPanelAnnouncement.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    
                    }else{
                            try {
                                clearTxtFields();
                            } catch (BasicException ex) {
                                Logger.getLogger(JPanelAnnouncement.class.getName()).log(Level.SEVERE, null, ex);
                            }
                    }
                        
                     
                    }else{

                        try {
                             m_dlSystem.announcementInsert(UUID.randomUUID().toString(), announcement, ValidFrom, ValidTo, active);
                             clearTxtFields();
                        }catch (BasicException ex) {
                            Logger.getLogger(JPanelAnnouncement.class.getName()).log(Level.SEVERE, null, ex);
                        }// TODO add your handling code


                        try {
                            m_dlSystem.peoplelogInsert(UUID.randomUUID().toString(), user, JRootApp.now(), "Announcement", 0.0);
                            // TODO add your handling code here:;
                        } catch (BasicException ex) {
                            Logger.getLogger(JPanelAnnouncement.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }

                  }
             }
        }
       initTableData();
    }//GEN-LAST:event_m_jBtnSaveActionPerformed
private void initTableData() {


        announce = new String[]{
            "SL No.", "Announcement", "Valid From", "Valid To", "Active", "Delete"
        };
         announceList = m_dlSales.getAllAnnouncement();
         announceSize = announceList.size();
         setAnnounceTableModelAndHeader(m_jtblAnnouncement, announceSize);
         setCellRenderer(m_jtblAnnouncement);
         setAnnounceTableData(m_jtblAnnouncement);

    }
private void setAnnounceTableModelAndHeader(JTable table, int size) {
        table.getTableHeader().setPreferredSize(new Dimension(30, 25));
        table.setModel(new DefaultTableModel(announce, size));
    }
 private void setCellRenderer(JTable table) {
        table.getColumn("Delete").setCellRenderer(new CustomCheckBoxEditor(table));
    }
    private void setAnnounceTableData(JTable table) {

        for (int col = 0; col < announceSize; col++) {

            table.setValueAt(col+1, col, 0);
        }
        for (int col = 0; col < announceSize; col++) {
            table.setValueAt(announceList.get(col).getAnnouncement(), col, 1);
        }
        for (int col = 0; col < announceSize; col++) {
            table.setValueAt(announceList.get(col).getValidfrom(), col, 2);
        }
        for (int col = 0; col < announceSize; col++) {
            table.setValueAt(announceList.get(col).getValidto(), col, 3);
        }
         for (int col = 0; col < announceSize; col++) {
            table.setValueAt(announceList.get(col).getActive(), col, 4);
        }

    }
    private void m_jBtnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_jBtnDeleteActionPerformed
        deleteAnnouncement(); // TODO add your handling code here:
}//GEN-LAST:event_m_jBtnDeleteActionPerformed

   private void deleteAnnouncement() {
        boolean exe = false;
          DateFormat format = new SimpleDateFormat("dd-MM-yyyy");
          String sysDate = format.format(new Date());
        int result = 0;
        int[] rowsCIn = m_jtblAnnouncement.getSelectedRows();

        for (int i = 0; i < rowsCIn.length; i++) {
            int row = rowsCIn[i];
            String id = announceList.get(row).getId();

                 m_dlSales.deleteAnnouncement(id);


            exe = true;
        }

       // showMsg("Attendance Approved");
        resetTable();
    }
        private void resetTable() {
              announceList = m_dlSales.getAllAnnouncement();
              announceSize = announceList.size();
              setAnnounceTableModelAndHeader(m_jtblAnnouncement, announceSize);
              setCellRenderer(m_jtblAnnouncement);
              setAnnounceTableData(m_jtblAnnouncement);

    }

    private void showMessage(JPanelAnnouncement aThis, String msg) {
        JOptionPane.showMessageDialog(aThis, msg);
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton m_jBtnDelete;
    private javax.swing.JButton m_jBtnSave;
    private javax.swing.JButton m_jBtnStartTime;
    private javax.swing.JLabel m_jLblEndTime;
    private javax.swing.JLabel m_jLblStartTime;
    private javax.swing.JTextField m_jTxtValidFrom;
    private javax.swing.JTextField m_jTxtValidTo;
    private javax.swing.JButton m_jbtnEndTime;
    private javax.swing.JLabel m_jlblShowName;
    private javax.swing.JTable m_jtblAnnouncement;
    private javax.swing.JTextArea m_txtAnnouncement;
    // End of variables declaration//GEN-END:variables
    
}
